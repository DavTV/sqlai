"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/generate";
exports.ids = ["pages/api/generate"];
exports.modules = {

/***/ "body-parser":
/*!******************************!*\
  !*** external "body-parser" ***!
  \******************************/
/***/ ((module) => {

module.exports = require("body-parser");

/***/ }),

/***/ "express":
/*!**************************!*\
  !*** external "express" ***!
  \**************************/
/***/ ((module) => {

module.exports = require("express");

/***/ }),

/***/ "mysql":
/*!************************!*\
  !*** external "mysql" ***!
  \************************/
/***/ ((module) => {

module.exports = require("mysql");

/***/ }),

/***/ "openai":
/*!*************************!*\
  !*** external "openai" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("openai");

/***/ }),

/***/ "pg":
/*!*********************!*\
  !*** external "pg" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("pg");

/***/ }),

/***/ "pg-promise":
/*!*****************************!*\
  !*** external "pg-promise" ***!
  \*****************************/
/***/ ((module) => {

module.exports = require("pg-promise");

/***/ }),

/***/ "(api)/./pages/api/generate.js":
/*!*******************************!*\
  !*** ./pages/api/generate.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var openai__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! openai */ \"openai\");\n/* harmony import */ var openai__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(openai__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var pg__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! pg */ \"pg\");\n/* harmony import */ var pg__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(pg__WEBPACK_IMPORTED_MODULE_1__);\n\n\nconst express = __webpack_require__(/*! express */ \"express\");\nconst mysql = __webpack_require__(/*! mysql */ \"mysql\");\nconst bodyParser = __webpack_require__(/*! body-parser */ \"body-parser\");\nconst server = express();\nserver.use(bodyParser.json());\nconst configuration = new openai__WEBPACK_IMPORTED_MODULE_0__.Configuration({\n    apiKey: process.env.OPENAI_API_KEY\n});\nconst openai = new openai__WEBPACK_IMPORTED_MODULE_0__.OpenAIApi(configuration);\n/* harmony default export */ async function __WEBPACK_DEFAULT_EXPORT__(req, res) {\n    if (!configuration.apiKey) {\n        res.status(500).json({\n            result: completion.data.choices[0].text,\n            query,\n            message: \"Conexi\\xf3n con api fallada por apiKey.\",\n            exito: false\n        });\n        return;\n    }\n    // console.log(configuration)\n    const host = req.body.host, user = req.body.user, password = req.body.password, database = req.body.database;\n    // console.log(req.body)\n    const query = req.body.query;\n    const inputFrecuent = req.body.inputFrecuent;\n    const typeDb = req.body.typeDb;\n    try {\n        const completion1 = await openai.createCompletion({\n            model: \"text-davinci-003\",\n            prompt: generatePrompt(query),\n            temperature: 0.6,\n            max_tokens: 200\n        });\n        switch(typeDb){\n            case 0:\n                const connection = mysql.createConnection({\n                    host: host,\n                    user: user,\n                    password: password,\n                    database: database\n                });\n                connection.connect(function(error) {\n                    try {\n                        if (error) {\n                            // console.log(sql)\n                            res.status(200).json({\n                                result: inputFrecuent || completion1.data.choices[0].text,\n                                query,\n                                message: \"Error de conexi\\xf3n.\",\n                                exito: false,\n                                details: [\n                                    {\n                                        message: \"Revisa los parametros de tu base de datos.\"\n                                    }\n                                ]\n                            });\n                        } else {\n                            // const sql =`SHOW FULL TABLES FROM ${database}`;\n                            const sql = completion1.data.choices[0].text;\n                            const sqlQuery = `Insert INTO querys (input,query) values (\"${inputFrecuent != \"\" ? inputFrecuent : query}\",\"${completion1.data.choices[0].text}\")`;\n                            connection.query(sql, (error, details)=>{\n                                // if(details.affectedRows){\n                                //     details =[{message:\"Query successfull.\"}]\n                                // }\n                                if (details) {\n                                    res.status(200).json({\n                                        result: completion1.data.choices[0].text,\n                                        query: inputFrecuent || query,\n                                        message: \"Conexi\\xf3n exitoso\",\n                                        exito: true,\n                                        details\n                                    });\n                                } else {\n                                    const QueryTraducido = async ()=>{\n                                        const queryTraducido = query + \" traduce solo la tabla a ingl\\xe9s y si se usa alguna columna traducela tambi\\xe9n,  muestrame solo la consulta final\";\n                                        const completionTraducido = await openai.createCompletion({\n                                            model: \"text-davinci-003\",\n                                            prompt: generatePrompt(queryTraducido),\n                                            temperature: 0.6,\n                                            max_tokens: 200\n                                        });\n                                        const sqlTraducido = completionTraducido.data.choices[0].text;\n                                        console.log(sqlTraducido, \"sql traducido\");\n                                        connection.query(sqlTraducido, (error, detailsTraducido)=>{\n                                            // console.log()\n                                            console.log(\"detalles traduciado\", detailsTraducido);\n                                            // res.status(200).json({ result: completionTraducido.data.choices[0].text, query: queryTraducido, message: \"ConexiÃ³n exitoso\", exito: true, detailsTraducido })\n                                            // details = detailsTraducido;\n                                            res.status(200).json({\n                                                result: completionTraducido.data.choices[0].text,\n                                                queryTraducido: inputFrecuent || query,\n                                                message: \"Conexi\\xf3n exitoso\",\n                                                exito: true,\n                                                details: detailsTraducido || [\n                                                    {\n                                                        message: \"No se encontro respuesta, intenta otra vez.\"\n                                                    }\n                                                ]\n                                            });\n                                        });\n                                    };\n                                    QueryTraducido();\n                                }\n                                console.log(\"details con la traducci\\xf3n activda\", details);\n                                details = details || [\n                                    {\n                                        message: \"No se encontro respuesta, intenta otra vez.\"\n                                    }\n                                ];\n                                details = details.affectedRows ? [\n                                    {\n                                        message: \"Query successfull.\"\n                                    }\n                                ] : details;\n                                console.log(details, \"details\");\n                                if (details.length > 1) {\n                                    connection.query(sqlQuery, (error, details)=>{\n                                        if (error) {\n                                            console.log(error);\n                                        } else {\n                                            console.log(\"entro\");\n                                            console.log(details, \"segunda consulta\");\n                                        }\n                                    });\n                                }\n                            // res.status(200).json({ result: completion.data.choices[0].text, query: inputFrecuent || query, message: \"ConexiÃ³n exitoso\", exito: true, details })\n                            });\n                        }\n                    } catch (x) {\n                        console.log(\"Contacto.agregarUsuario.connect --Error-- \" + x);\n                    }\n                });\n                break;\n            case 1:\n                try {\n                    const pgp = __webpack_require__(/*! pg-promise */ \"pg-promise\")({\n                        noWarnings: true\n                    });\n                    const db = pgp(`postgres://${user}:${password}@${host}:5432/${database}`);\n                    //  const  result = pool.query(\"select NOW()\",\"result\").json()\n                    console.log(db.connect);\n                    const postGres = async ()=>{\n                        try {\n                            const result = await db.many(completion1.data.choices[0].text);\n                            console.log(result);\n                            res.status(200).json({\n                                result: completion1.data.choices[0].text,\n                                query: inputFrecuent || query,\n                                message: \"Conection successfull\",\n                                exito: true,\n                                details: result\n                            });\n                            // const sql = completion.data.choices[0].text;\n                            // const sqlQuery = `Insert INTO querys (input,query) values (\"${inputFrecuent != \"\" ? inputFrecuent : query}\",\"${completion.data.choices[0].text}\")`\n                            console.log(query);\n                            if (result) {\n                                const result2 = await db.one(`Insert INTO querys (input,query) values ('${inputFrecuent != \"\" ? inputFrecuent : query}','${completion1.data.choices[0].text}')`);\n                            }\n                        //  console.log(result2)\n                        } catch (error) {\n                            console.log(error);\n                            let message = error.message;\n                            if (message) {\n                                res.status(200).json({\n                                    result: completion1.data.choices[0].text,\n                                    query: inputFrecuent || query,\n                                    message,\n                                    details: [\n                                        {\n                                            message\n                                        }\n                                    ]\n                                });\n                            } else {\n                                res.status(200).json({\n                                    result: completion1.data.choices[0].text,\n                                    query: inputFrecuent || query,\n                                    message: \"Revisa los parametros de tu base de datos.\",\n                                    details: [\n                                        {\n                                            message: \"No se encontro data, intenta otra vez.\"\n                                        }\n                                    ]\n                                });\n                            }\n                        }\n                    //  console.log(result)\n                    };\n                    postGres();\n                // db.client.on('connect', (error) => {\n                //   console.log('ConexiÃ³n establecida');\n                //   if(error){\n                //     res.status(200).json({ result: inputFrecuent || completion.data.choices[0].text, query, message: \"Conection Error.\", exito: false, details: [{ message: \"Review your database parameters.\" }] })\n                //   }else{\n                //   const postGres= async()=>{\n                //      const result = await db.one(completion.data.choices[0].text);\n                //      details = result || [{ message: \"No data found, try another query.\" }]\n                //      details = result.rows ? [{ message: \"Query successfull.\" }] : details\n                //      res.status(200).json({ result: completion.data.choices[0].text, query: inputFrecuent || query, message: \"Conection Successfull\", exito: true, details })\n                //     //  console.log(result)\n                //    }\n                //    postGres()\n                //   }\n                // });\n                //  console.log(data);\n                //  let result = await pool.query(\"select NOW()\");\n                } catch (error) {\n                    console.log(error, \"postgrees\");\n                }\n                break;\n            default:\n                console.log(\"ning\\xfan gestor fue selecionado\");\n                break;\n        }\n    } catch (err) {\n        res.status(200).json({\n            result: completion.data.choices[0].text,\n            query: inputFrecuent || query,\n            message: \"Revisa los parametros de su base de datos.\",\n            details: [\n                {\n                    message: \"Error con la key.\"\n                }\n            ]\n        });\n        res.status(200).json({\n            message: \"Error en la conexi\\xf3n a la base de datos o apiKey.\"\n        });\n    }\n}\n// console.log (completion.data.choices[0].text);\nfunction generatePrompt(query) {\n    const capitalizedquery = query[0].toUpperCase() + query.slice(1).toLowerCase();\n    return `Suggest three names for an query that is a superhero.\r\n\r\nQuery: agregar\r\nResponse: INSERT INTO Alumnos (IdAlumno, Nombres, Apellidos, Edad, Direccion_Residencia) VALUES \r\n('0101', 'Franklin1', 'Garcia', 25, 'avenida 01');  \r\n\r\nQuery: eliminar\r\nResponse: DELETE FROM cursos WHERE id =1; \r\n  \r\nQuery: mostrar\r\nResponse: SELECT * FROM cursos\r\n\r\nQuery: actualiza\r\nResponse: UPDATE cursos SET name ='david', slug ='dato', description ='esta es una descripciÃ³n', categoria='libros' WHERE id =2\r\n\r\nQuery: verifica\r\nResponse: verifica si existe la tabla, estas tabla pueden ser nombradas en ingles o espaÃ±ol, ademÃ¡s considera de forma indistinta si es plural o singular;\r\n\r\nQuery: ${capitalizedquery}\r\nResponse:`;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./pages/api/generate.js\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = (__webpack_exec__("(api)/./pages/api/generate.js"));
module.exports = __webpack_exports__;

})();